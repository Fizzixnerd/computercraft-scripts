-- -*- mode:lua -*-
os.loadAPI("main_modem")
os.loadAPI("wrapper")
os.loadAPI("stupid_csv")
os.loadAPI("log")
os.loadAPI("arraylib")
-- in case I ever update the csv file, I don't want to have to change
-- all the references.
local csv = stupid_csv

-- This is a csv file containing your known addresses. Each line looks
-- like: location_name,address_string
local address_path = "sg_addresses.csv"
-- get the system's primary peripheral modem
local net = main_modem.modem
-- get the arguments passed to the program
local argv = {...}
-- adjust this ID for your particular setup
local stargateID = "stargate_1"
-- This is the actual stargate handle
sg = wrapper.wrapRemote(net, stargateID)

function knownAddresses ()
   -- if the address file doesn't exist, return nothing and report.
   local result = {}
   if (not fs.exists(address_path)) then
      log.warning("Stargate address file " ..
		       address_path .. " does not exist.")
      return nil
   elseif (fs.isDir(address_path)) then
      log.warning("Address directory not implemented yet.")
      return nil
   else
      for address_line in io.lines(address_path) do
	 local parsed_line = csv.parseCSVLine(address_line)
	 result[parsed_line[1]] = parsed_line[2]
      end
      return result
   end
end

local function dialHandler (hargs)
   if (#hargs ~= 1) then
      log.error("'dial' expects one argument: the name of a Stargate, or a Stargate address.")
   else
      local address = knownAddresses()[hargs[1]] or hargs[1]
      local status = sg.dial(address)
      if (status) then
	 log.info("Dialing failed!")
	 log.error(status)
      else
	 log.info("Dialing address.  Please stand back from the Stargate.")
      end
   end
end
local dial_usage = "dial {<address> | <name>}"
local dial_doc =
" @ Open a wormhole to a remote Stargate.\n\
  * '<address>' is a 7 character Stargate address.\n\
  * '<name>' is the name of a saved Stargate address."

local function disconnectHandler (hargs)
   if (#hargs ~= 0) then
      log.error("'disconnect' expects zero arguments.")
   else
      local status = sg.disconnect()
      if (status) then
	 log.info("Disconnecting failed!")
	 log.error(status)
      else
	 log.info("Disconnecting Stargate.")
      end
   end
end
local disconnect_usage = "{disconnect | dc}"
local disconnect_doc = 
" @ Close your Stargate.\n\
  * Even works when you are the receiver and the config prevents receivers from closing the connection.  This may change."

local function addressHandler (hargs)
   log.notImplemented()
end
local address_usage = 
"{address | addr} {add <name> <address> |\n\
                   list |\n\
                   rename <old_name> <new_name> |\n\
                   remove <name>}"
local address_doc =
" @ Easily manipulate your saved addresses.\n\
  * Addresses are saved in the file 'sg_addresses.csv'.\n\
  * 'add' adds a new address identified by <name> with 7 character address <address>.\n\
  * 'list' lists the names and addresses of your saved Stargate addresses.\n\
  * 'rename' renames a saved address from <old_name> to <new_name>.\n\
  * 'remove' permanently removes the address identified by <name> from your saved addresses.  You can of course add the address back later using 'add'."

local function infoHandler (hargs)
   log.notImplemented()
end
local info_usage = ""
local info_doc = ""

local function helpHandler (hargs)
   log.notImplemented()
end
local help_usage = "help [usage]"
local help_summary = "Display this help message."
local help_doc = "With 'usage', only displays the usage information."

program =
   {name = "stargate",
    help =
       {usage = true,
	summary = true,
	long_help = "Easily control your Stargate."},
    commands = 
       {dial = 
	   {handler = dialHandler,
	    help =
	       {usage = dial_usage,
		summary = dial_summary,
		long_help = dial_doc}},
	disconnect =
	   {handler = disconnectHandler,
	    help =
	       {usage = disconnect_usage,
		summary = disconnect_summary,
		long_help = disconnect_doc}},
	address =
	   {handler = addressHandler,
	    help =
	       {usage = address_usage,
		summary = address_summary,
		long_help = address_doc}},
	info =
	   {handler = infoHandler,
	    help =
	       {usage = info_usage,
		summary = info_summary,
		long_help = info_doc}},
	help =
	   {handler = helpHandler,
	    help =
	       {usage = help_usage,
		summary = help_summary,
		long_help = help_doc}}}}

-- aliases for common commands
program.commands.dc = program.commands.disconnect
program.commands.addr = program.commands.address

local function main(args)
   local command = args[1]
   local handler = program.commands[command] and program.commands[command].handler
   local handler_args = arraylib.slice(args, 2)
   if (not command) then
      return nil
   elseif (not handler) then
      log.error("Invalid command.  Try 'stargate help' for valid commands.")
   else
      handler(handler_args)
   end
end

local function debug ()
   os.loadAPI("ptable")
   ptable.ptable(knownAddresses())
   ptable.ptable(argv)
   ptable.ptable(sg)
   main(argv)
end

main(argv)
